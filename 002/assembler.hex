# Copyright (c) 2022 Taylor Santos
# MIT License

# [0x0000]
# ELF Header
7f 45 4c 46              # EI_MAG:        ELF Magic Number
02                       # EI_CLASS:      64-bit
01                       # EI_DATA:       Little-Endian
01                       # EI_VERSION:    ELF Version
00                       # EI_OSABI:      System V
00                       # EI_ABIVERSION: ABI Version
00 00 00 00 00 00 00     # EI_PAD:        Padding
02 00                    # e_type:        ET_EXEC
3e 00                    # e_machine:     AMD x86-64
01 00 00 00              # e_version:     ELF Version 1
00 20 40 00 00 00 00 00  # e_entry:       Entry Point Address
40 00 00 00 00 00 00 00  # e_phoff:       Program Header Table Offset
00 02 00 00 00 00 00 00  # e_shoff:       Section Header Table Offset
00 00 00 00              # e_flags
40 00                    # e_ehsize:      ELF Header Size
38 00                    # e_phentsize:   Program Header Table Entry Size
04 00                    # e_phnum:       Program Header Table Entry Count
40 00                    # e_shentsize:   Section Header Table Entry Size
05 00                    # e_shnum:       Section Header Table Entry Count
04 00                    # e_shstrndx:    Section Header Names Index
# +0x0040

# [0x0040]
# Program Header 0 - ELF and Program Headers
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
04 00 00 00              # p_flags:       PF_R - Read
00 00 00 00 00 00 00 00  # p_offset:      Segment Offset
00 00 40 00 00 00 00 00  # p_vaddr:       Segment Virtual Address
00 00 40 00 00 00 00 00  # p_paddr:       Segment Physical Address
e8 00 00 00 00 00 00 00  # p_filesz:      Size of Segment in File Image
e8 00 00 00 00 00 00 00  # p_memsz:       Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x0078]
# Program Header 1 - .text Section
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
05 00 00 00              # p_flags:       PF_R|PF_X - Read & Execute
00 20 00 00 00 00 00 00  # p_offset:    * Segment Offset
00 20 40 00 00 00 00 00  # p_vaddr:     * Segment Virtual Address
00 20 40 00 00 00 00 00  # p_paddr:     * Segment Physical Address
59 04 00 00 00 00 00 00  # p_filesz:    * Size of Segment in File Image
59 04 00 00 00 00 00 00  # p_memsz:     * Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x00B0]
# Program Header 2 - .rodata Section
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
04 00 00 00              # p_flags:       PF_R - Read
00 10 00 00 00 00 00 00  # p_offset:    * Segment Offset
00 10 40 00 00 00 00 00  # p_vaddr:     * Segment Virtual Address
00 10 40 00 00 00 00 00  # p_paddr:     * Segment Physical Address
B6 00 00 00 00 00 00 00  # p_filesz:    * Size of Segment in File Image
B6 00 00 00 00 00 00 00  # p_memsz:     * Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x00E8]
# Program Header 3 - .bss Section
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
06 00 00 00              # p_flags:       PF_R|PF_W - Read & Write
B8 00 00 00 00 00 00 00  # p_offset:      Segment Offset
B8 30 40 00 00 00 00 00  # p_vaddr:       Segment Virtual Address
00 30 40 00 00 00 00 00  # p_paddr:       Segment Physical Address
00 00 00 00 00 00 00 00  # p_filesz:      Size of Segment in File Image
60 00 00 00 00 00 00 00  # p_memsz:       Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x0120]
# Section Header Name Table 
00                             # Leading Zero Byte
2e 73 68 73 74 72 74 61 62 00  # ".shstrtab"
2e 74 65 78 74 00              # ".text"
2e 72 6f 64 61 74 61 00        # ".rodata"
2e 62 73 73 00                 # ".bss"
# +0x001E

# [0x013E]
# Padding zeroes
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000
# +0x0

# [0x0200]
# Section Table 0 (Reserved)
00 00 00 00              # sh_name
00 00 00 00              # sh_type
00 00 00 00 00 00 00 00  # sh_flags
00 00 00 00 00 00 00 00  # sh_addr
00 00 00 00 00 00 00 00  # sh_offset
00 00 00 00 00 00 00 00  # sh_size
00 00 00 00              # sh_link
00 00 00 00              # sh_info
00 00 00 00 00 00 00 00  # sh_addralign
00 00 00 00 00 00 00 00  # sh_entsize
# +0x0040

# [0x0240]
# Section Table 1
0b 00 00 00              # sh_name:        ".text"
01 00 00 00              # sh_type:        SHT_PROGBITS - Program Data
06 00 00 00 00 00 00 00  # sh_flags:       SHF_ALLOC|SHF_EXECINSTR - Occupies Memory and is Executable
00 20 40 00 00 00 00 00  # sh_addr:      * Virtual address in memory if loaded
00 20 00 00 00 00 00 00  # sh_offset:    * Offset in File Image
59 04 00 00 00 00 00 00  # sh_size:      * Size in File Image
00 00 00 00              # sh_link:        Associated Section Index
00 00 00 00              # sh_info:        Extra Info
10 00 00 00 00 00 00 00  # sh_addralign:   Alignment
00 00 00 00 00 00 00 00  # sh_entsize:     Fixed Size Entry Size
# +0x0040

# [0x0280]
# Section Table 0 (Reserved)
11 00 00 00              # sh_name         ".rodata"
01 00 00 00              # sh_type         SHT_PROGBITS - Program Data
02 00 00 00 00 00 00 00  # sh_flags        SHF_ALLOC - Occupies Memory
00 10 40 00 00 00 00 00  # sh_addr       * Virtual Address
00 10 00 00 00 00 00 00  # sh_offset     * Offset in File Image
B6 00 00 00 00 00 00 00  # sh_size       * Size in File Image
00 00 00 00              # sh_link         
00 00 00 00              # sh_info         
04 00 00 00 00 00 00 00  # sh_addralign    
00 00 00 00 00 00 00 00  # sh_entsize      
# +0x0040

# [0x02C0]
# Section Table 2
19 00 00 00              # sh_name:        ".bss"
08 00 00 00              # sh_type:        SHT_NOBITS - Program Space with No Data
03 00 00 00 00 00 00 00  # sh_flags:       SHF_WRITE|SHF_ALLOC - Writable and Occupies Memory
00 20 40 00 00 00 00 00  # sh_addr:      * Virtual address in memory if loaded
00 20 00 00 00 00 00 00  # sh_offset:    * Offset in File Image
60 00 00 00 00 00 00 00  # sh_size:      * Size in File Image
00 00 00 00              # sh_link:        Associated Section Index
00 00 00 00              # sh_info:        Extra Info
04 00 00 00 00 00 00 00  # sh_addralign:   Alignment
00 00 00 00 00 00 00 00  # sh_entsize:     Fixed Size Entry Size
# +0x0040

# [0x0300]
# Section Table 3
01 00 00 00              # sh_name:        ".shstrtab"
03 00 00 00              # sh_type:        SHT_STRTAB - String Table
00 00 00 00 00 00 00 00  # sh_flags:       None
00 00 00 00 00 00 00 00  # sh_addr:        Virtual address in memory if loaded
20 01 00 00 00 00 00 00  # sh_offset:      Offset in File Image
1e 00 00 00 00 00 00 00  # sh_size:        Size in File Image
00 00 00 00              # sh_link:        Associated Section Index
00 00 00 00              # sh_info:        Extra Info
01 00 00 00 00 00 00 00  # sh_addralign:   Alignment
00 00 00 00 00 00 00 00  # sh_entsize:     Fixed Size Entry Size
# +0x0040

# [0x0340]
# Padding to align to 0x1000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# +0x0D00

# [0x1000]
# .rodata:
0a                    # [0x1000]    "\n"
09                    # [0x1001]    "\t"
6c 61 62 65 6c 3a 09  # [0x1002]    "label:\t"
69 64 65 6e 74 3a 09  # [0x1009]    "ident:\t"
68 65 78 3a 20 20 09  # [0x1010]    "hex  :\t"
69 6e 73 74 72 3a 09  # [0x1017]    "instr:\t"

# [0x101E]
# Instruction Mnemonic Table
63 61 6c 6c           # [0x101E]    "call"
6a 65                 # [0x1022]    "je"
6a 67                 # [0x1024]    "jg"
6a 67 65              # [0x1026]    "jge"
6a 6c                 # [0x1029]    "jl"
6a 6c 65              # [0x102B]    "jle"
6a 6d 70              # [0x102E]    "jmp"
6a 6e 65              # [0x1031]    "jne"
72 65 74              # [0x1034]    "ret"
73 79 73 63 61 6c 6c  # [0x1037]    "syscall"

# [0x103E]
# Instruction Lookup Table
# Mnemonic Address,      M. Length, Ins. Length, Instructions
1e 10 40 00 00 00 00 00  04         01           call 00      # call
22 10 40 00 00 00 00 00  02         02           0f cd        # je
24 10 40 00 00 00 00 00  02         02           0f 8f        # jg
26 10 40 00 00 00 00 00  03         02           0f 8d        # jge
29 10 40 00 00 00 00 00  02         02           0f 8c        # jl
2b 10 40 00 00 00 00 00  03         02           8f 8e        # jle
2e 10 40 00 00 00 00 00  03         01           e9 00        # jmp
31 10 40 00 00 00 00 00  03         02           0f 85        # jne
34 10 40 00 00 00 00 00  03         01           c3 00        # ret
37 10 40 00 00 00 00 00  07         02           0f 05        # syscall
# +0x0078

# [0x10B6]
# Padding to align to 0x2000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000

# [0x2000]

# Register allocations:
#   rax    get* return value
#   rbx    current hex digit
#   r12    in index
#   r13    in size
#   r14    out index
#   r15    out ptr
#.text:
        4d 31 ff                # xor    r15,r15
        48 31 ff                # xor    rdi,rdi
        b8 0c 00 00 00          # mov    eax,0xc
        syscall                 # syscall
        50                      # push   rax
        49 89 c4                # mov    r12,rax
        48 89 c3                # mov    rbx,rax
        ba 40 00 00 00          # mov    edx,0x40
        48 8d 7b 40             # lea    rdi,[rbx+0x40]
        b8 0c 00 00 00          # mov    eax,0xc
        syscall                 # syscall
        48 89 de                # mov    rsi,rbx
        48 89 c3                # mov    rbx,rax
        b8 00 00 00 00          # mov    eax,0x0
        48 31 ff                # xor    rdi,rdi
        syscall                 # syscall
        48 83 f8 40             # cmp    rax,0x40
        0f 84 db ff ff ff       # je
        4c 8d 34 06             # lea    r14,[rsi+rax*1]
        4c 89 f3                # mov    rbx,r14
        call a7 00 00 00        # call
        48 83 f8 ff             # cmp    rax,0xffffffffffffffff
        0f 84 a1 02 00 00       # je
        48 83 f8 00             # cmp    rax,0x0
        0f 85 35 00 00 00       # jne
        49 83 c5 02             # add    r13,0x2
        4d 39 e5                # cmp    r13,r12
        0f 8f da ff ff ff       # jg
        49 0f b6 55 fe          # movzx  rdx,BYTE PTR [r13-0x2]
        call 85 03 00 00        # call
        41 88 d2                # mov    r10b,dl
        49 0f b6 55 ff          # movzx  rdx,BYTE PTR [r13-0x1]
        call 78 03 00 00        # call
        41 c0 e2 04             # shl    r10b,0x4
        44 00 d2                # add    dl,r10b
        call 92 03 00 00        # call
        e9 cb ff ff ff          # jmp
        48 83 f8 01             # cmp    rax,0x1
        0f 85 05 00 00 00       # jne
        e9 a3 ff ff ff          # jmp
        48 83 f8 02             # cmp    rax,0x2
        0f 85 05 00 00 00       # jne
        e9 94 ff ff ff          # jmp
        48 83 e8 03             # sub    rax,0x3
        48 6b c0 0c             # imul   rax,rax,0xc
        48 05 3e 10 40 00       # add    rax,0x40203e
        41 54                   # push   r12
        41 55                   # push   r13
        4c 8d 68 0a             # lea    r13,[rax+0xa]
        4c 0f b6 60 09          # movzx  r12,BYTE PTR [rax+0x9]
        49 0f b6 55 00          # movzx  rdx,BYTE PTR [r13+0x0]
        call 4a 03 00 00        # call
        49 ff c5                # inc    r13
        49 ff cc                # dec    r12
        4d 85 e4                # test   r12,r12
        0f 85 e7 ff ff ff       # jne
        41 5d                   # pop    r13
        41 5c                   # pop    r12
        e9 57 ff ff ff          # jmp
        49 ff c4                # inc    r12
        49 39 dc                # cmp    r12,rbx
        0f 8c 08 00 00 00       # jl
        48 c7 c0 ff ff ff ff    # mov    rax,0xffffffffffffffff
        c3                      # ret
        4d 89 e5                # mov    r13,r12
        49 0f b6 04 24          # movzx  rax,BYTE PTR [r12]
        3c 23                   # cmp    al,0x23
        0f 84 b5 01 00 00       # je
        3c 2e                   # cmp    al,0x2e
        0f 84 fa 00 00 00       # je
        3c 30                   # cmp    al,0x30
        0f 8c cc ff ff ff       # jl
        3c 39                   # cmp    al,0x39
        0f 8e a3 00 00 00       # jle
        3c 41                   # cmp    al,0x41
        0f 8c bc ff ff ff       # jl
        3c 46                   # cmp    al,0x46
        0f 8e 2d 00 00 00       # jle
        3c 5a                   # cmp    al,0x5a
        0f 8e d2 00 00 00       # jle
        3c 5f                   # cmp    al,0x5f
        0f 84 ca 00 00 00       # je
        3c 61                   # cmp    al,0x61
        0f 8c 9c ff ff ff       # jl
        3c 66                   # cmp    al,0x66
        0f 8e 0d 00 00 00       # jle
        3c 7a                   # cmp    al,0x7a
        0f 8e b2 00 00 00       # jle
        e9 87 ff ff ff          # jmp
        49 ff c4                # inc    r12
        49 39 dc                # cmp    r12,rbx
        0f 8d 9b 00 00 00       # jge
        49 0f b6 04 24          # movzx  rax,BYTE PTR [r12]
        3c 30                   # cmp    al,0x30
        0f 8c 8e 00 00 00       # jl
        3c 39                   # cmp    al,0x39
        0f 8e df ff ff ff       # jle
        3c 3a                   # cmp    al,0x3a
        0f 8e 31 01 00 00       # jle
        3c 41                   # cmp    al,0x41
        0f 8c 76 00 00 00       # jl
        3c 46                   # cmp    al,0x46
        0f 8e c7 ff ff ff       # jle
        3c 5a                   # cmp    al,0x5a
        0f 8e 6c 00 00 00       # jle
        3c 5f                   # cmp    al,0x5f
        0f 84 64 00 00 00       # je
        3c 61                   # cmp    al,0x61
        0f 8c 56 00 00 00       # jl
        3c 66                   # cmp    al,0x66
        0f 8e a7 ff ff ff       # jle
        3c 7a                   # cmp    al,0x7a
        0f 8e 4c 00 00 00       # jle
        e9 41 00 00 00          # jmp
        49 ff c4                # inc    r12
        49 39 dc                # cmp    r12,rbx
        0f 8d 35 00 00 00       # jge
        49 0f b6 04 24          # movzx  rax,BYTE PTR [r12]
        3c 30                   # cmp    al,0x30
        0f 8c 28 00 00 00       # jl
        3c 39                   # cmp    al,0x39
        0f 8e df ff ff ff       # jle
        3c 41                   # cmp    al,0x41
        0f 8c 18 00 00 00       # jl
        3c 46                   # cmp    al,0x46
        0f 8e cf ff ff ff       # jle
        3c 61                   # cmp    al,0x61
        0f 8c 08 00 00 00       # jl
        3c 66                   # cmp    al,0x66
        0f 8e bf ff ff ff       # jle
        b8 00 00 00 00          # mov    eax,0x0
        c3                      # ret
        49 ff c4                # inc    r12
        49 39 dc                # cmp    r12,rbx
        0f 8d 45 00 00 00       # jge
        49 0f b6 04 24          # movzx  rax,BYTE PTR [r12]
        3c 30                   # cmp    al,0x30
        0f 8c 38 00 00 00       # jl
        3c 39                   # cmp    al,0x39
        0f 8e df ff ff ff       # jle
        3c 3a                   # cmp    al,0x3a
        0f 84 84 00 00 00       # je
        3c 41                   # cmp    al,0x41
        0f 8c 20 00 00 00       # jl
        3c 5a                   # cmp    al,0x5a
        0f 8e c7 ff ff ff       # jle
        3c 5f                   # cmp    al,0x5f
        0f 84 bf ff ff ff       # je
        3c 61                   # cmp    al,0x61
        0f 8c 08 00 00 00       # jl
        3c 7a                   # cmp    al,0x7a
        0f 8e af ff ff ff       # jle
        41 56                   # push   r14
        4d 31 f6                # xor    r14,r14
        41 57                   # push   r15
        49 bf 3e 10 40 00 00    # movabs r15,0x40103e
        00 00 00 #
        4c 89 e2                # mov    rdx,r12
        4c 29 ea                # sub    rdx,r13
        4c 89 ee                # mov    rsi,r13
        41 3a 57 08             # cmp    dl,BYTE PTR [r15+0x8]
        0f 85 1d 00 00 00       # jne
        49 8b 3f                # mov    rdi,QWORD PTR [r15]
        call 29 01 00 00        # call
        48 85 c0                # test   rax,rax
        0f 85 0c 00 00 00       # jne
        4c 89 f0                # mov    rax,r14
        48 83 c0 03             # add    rax,0x3
        41 5f                   # pop    r15
        41 5e                   # pop    r14
        c3                      # ret
        49 83 c7 0c             # add    r15,0xc
        49 ff c6                # inc    r14
        49 83 fe 0a             # cmp    r14,0xa
        0f 8c c8 ff ff ff       # jl
        b8 02 00 00 00          # mov    eax,0x2
        41 5f                   # pop    r15
        41 5e                   # pop    r14
        c3                      # ret
        b8 01 00 00 00          # mov    eax,0x1
        c3                      # ret
        49 ff c4                # inc    r12
        49 39 dc                # cmp    r12,rbx
        0f 8c 08 00 00 00       # jl
        48 c7 c0 ff ff ff ff    # mov    rax,0xffffffffffffffff
        c3                      # ret
        49 0f b6 04 24          # movzx  rax,BYTE PTR [r12]
        3c 0a                   # cmp    al,0xa
        0f 84 09 fe ff ff       # je
        3c 0d                   # cmp    al,0xd
        0f 84 01 fe ff ff       # je
        e9 d2 ff ff ff          # jmp
        call 42 01 00 00        # call
        b8 3c 00 00 00          # mov    eax,0x3c
        bf 00 00 00 00          # mov    edi,0x0
        syscall                 # syscall
        89 f8                   # mov    eax,edi
        b9 0a 00 00 00          # mov    ecx,0xa
        99                      # cdq
        f7 f9                   # idiv   ecx
        89 d0                   # mov    eax,edx
        c3                      # ret
        89 f8                   # mov    eax,edi
        b9 0a 00 00 00          # mov    ecx,0xa
        99                      # cdq
        f7 f9                   # idiv   ecx
        c3                      # ret
        49 ba b8 30 40 00 00    # movabs r10,0x4030b8
        00 00 00 #
        call 0a 00 00 00        # call
        4c 89 d0                # mov    rax,r10
        48 2d b8 30 40 00       # sub    rax,0x4030b8
        c3                      # ret
        call ca ff ff ff        # call
        48 83 c0 30             # add    rax,0x30
        48 83 ff 0a             # cmp    rdi,0xa
        0f 8c 0f 00 00 00       # jl
        50                      # push   rax
        call c3 ff ff ff        # call
        48 89 c7                # mov    rdi,rax
        call df ff ff ff        # call
        58                      # pop    rax
        41 88 02                # mov    BYTE PTR [r10],al
        49 ff c2                # inc    r10
        c3                      # ret
        41 c6 02 30             # mov    BYTE PTR [r10],0x30
        49 ff c2                # inc    r10
        c3                      # ret
        call b1 ff ff ff        # call
        48 89 c2                # mov    rdx,rax
        b8 01 00 00 00          # mov    eax,0x1
        bf 01 00 00 00          # mov    edi,0x1
        48 be b8 30 40 00 00    # movabs rsi,0x4030b8
        00 00 00 #
        syscall                 # syscall
        c3                      # ret
        b8 01 00 00 00          # mov    eax,0x1
        bf 01 00 00 00          # mov    edi,0x1
        48 be 00 10 40 00 00    # movabs rsi,0x401000
        00 00 00 #
        ba 01 00 00 00          # mov    edx,0x1
        syscall                 # syscall
        c3                      # ret
        b8 01 00 00 00          # mov    eax,0x1
        48 be 01 10 40 00 00    # movabs rsi,0x401001
        00 00 00 #
        ba 01 00 00 00          # mov    edx,0x1
        syscall                 # syscall
        c3                      # ret
        31 c0                   # xor    eax,eax
        48 85 d2                # test   rdx,rdx
        0f 85 1a 00 00 00       # jne
        e9 2f 00 00 00          # jmp
        44 38 c1                # cmp    cl,r8b
        0f 85 1d 00 00 00       # jne
        48 ff c0                # inc    rax
        48 39 c2                # cmp    rdx,rax
        0f 84 18 00 00 00       # je
        0f b6 0c 07             # movzx  ecx,BYTE PTR [rdi+rax*1]
        44 0f b6 04 06          # movzx  r8d,BYTE PTR [rsi+rax*1]
        84 c9                   # test   cl,cl
        0f 85 da ff ff ff       # jne
        0f b6 c1                # movzx  eax,cl
        44 29 c0                # sub    eax,r8d
        c3                      # ret
        31 c0                   # xor    eax,eax
        c3                      # ret
        80 fa 39                # cmp    dl,0x39
        0f 8f 08 00 00 00       # jg
        80 ea 30                # sub    dl,0x30
        e9 14 00 00 00          # jmp
        80 fa 46                # cmp    dl,0x46
        0f 8f 08 00 00 00       # jg
        80 ea 37                # sub    dl,0x37
        e9 03 00 00 00          # jmp
        80 ea 57                # sub    dl,0x57
        c3                      # ret
        49 83 ff 40             # cmp    r15,0x40
        0f 8c 07 00 00 00       # jl
        52                      # push   rdx
        call 0c 00 00 00        # call
        5a                      # pop    rdx
        41 88 97 d8 30 40 00    # mov    BYTE PTR [r15+0x4030d8],dl
        49 ff c7                # inc    r15
        c3                      # ret
        b8 01 00 00 00          # mov    eax,0x1
        bf 01 00 00 00          # mov    edi,0x1
        48 be d8 30 40 00 00    # movabs rsi,0x4030d8
        00 00 00 #
        4c 89 fa                # mov    rdx,r15
        syscall                 # syscall
        4d 31 ff                # xor    r15,r15
        c3                      # ret
# +0x0459

# [0x2459]