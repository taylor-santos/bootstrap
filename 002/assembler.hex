# Copyright (c) 2022 Taylor Santos
# MIT License

# [0x0000]
# ELF Header
7f 45 4c 46              # EI_MAG:        ELF Magic Number
02                       # EI_CLASS:      64-bit
01                       # EI_DATA:       Little-Endian
01                       # EI_VERSION:    ELF Version
00                       # EI_OSABI:      System V
00                       # EI_ABIVERSION: ABI Version
00 00 00 00 00 00 00     # EI_PAD:        Padding
02 00                    # e_type:        ET_EXEC
3e 00                    # e_machine:     AMD x86-64
01 00 00 00              # e_version:     ELF Version 1
00 10 40 00 00 00 00 00  # e_entry:     * Entry Point Address
40 00 00 00 00 00 00 00  # e_phoff:       Program Header Table Offset
b8 20 00 00 00 00 00 00  # e_shoff:     * Section Header Table Offset
00 00 00 00              # e_flags
40 00                    # e_ehsize:      ELF Header Size
38 00                    # e_phentsize:   Program Header Table Entry Size
03 00                    # e_phnum:       Program Header Table Entry Count
40 00                    # e_shentsize:   Section Header Table Entry Size
04 00                    # e_shnum:       Section Header Table Entry Count
03 00                    # e_shstrndx:    Name Table Section Header Index
# +0x0040

################################      ###############################
# Program Headers - [0x0040]                                  #
################################      ###############################

# [0x0040]
# Program Header 0 - ELF and Program Headers
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
04 00 00 00              # p_flags:       PF_R - Read
00 00 00 00 00 00 00 00  # p_offset:      Segment Offset
00 00 40 00 00 00 00 00  # p_vaddr:       Segment Virtual Address
00 00 40 00 00 00 00 00  # p_paddr:       Segment Physical Address
e8 00 00 00 00 00 00 00  # p_filesz:    * Size of Segment in File Image
e8 00 00 00 00 00 00 00  # p_memsz:     * Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x0078]
# Program Header 1 - .text Section
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
05 00 00 00              # p_flags:       PF_R|PF_X - Read & Execute
00 10 00 00 00 00 00 00  # p_offset:    * Segment Offset
00 10 40 00 00 00 00 00  # p_vaddr:     * Segment Virtual Address
00 10 40 00 00 00 00 00  # p_paddr:     * Segment Physical Address
9c 04 00 00 00 00 00 00  # p_filesz:    * Size of Segment in File Image
9c 04 00 00 00 00 00 00  # p_memsz:     * Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x00B0]
# Program Header 2 - .rodata Section
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
04 00 00 00              # p_flags:       PF_R - Read
00 20 00 00 00 00 00 00  # p_offset:    * Segment Offset
00 20 40 00 00 00 00 00  # p_vaddr:     * Segment Virtual Address
00 20 40 00 00 00 00 00  # p_paddr:     * Segment Physical Address
98 00 00 00 00 00 00 00  # p_filesz:    * Size of Segment in File Image
98 00 00 00 00 00 00 00  # p_memsz:     * Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x00E8]
# Padding to align to 0x1000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

################################      ###############################
# .text Section - [0x1000]                                    #
################################      ###############################

# [0x1000]
#.text:
_start:
        55                            # push   rbp
        48 89 e5                      # mov    rbp,rsp
        call stdin_to_heap
        53                            # push   rbx
        49 ba ef be ad de ef be ad de # movabs r10,0xdeadbeefdeadbeef
        41 52                         # push   r10
        49 89 df                      # mov    r15,rbx

scan_loop:
        call scan
        48 83 f8 ff                   # cmp    rax,0xffffffffffffffff
        je ident_pass
        48 83 f8 00                   # cmp    rax,0x0
        jne scan_loop1

print_hex:
        49 83 c5 02                   # add    r13,0x2
        4d 39 e5                      # cmp    r13,r12
        jg scan_loop
        49 0f b6 55 fe                # movzx  rdx,BYTE PTR [r13-0x2]
        call hex_to_byte
        41 88 d2                      # mov    r10b,dl
        49 0f b6 55 ff                # movzx  rdx,BYTE PTR [r13-0x1]
        call hex_to_byte
        41 c0 e2 04                   # shl    r10b,0x4
        44 00 d2                      # add    dl,r10b
        call putc
        jmp print_hex

scan_loop1:
        48 83 f8 01                   # cmp    rax,0x1
        jne scan_loop2
        4d 89 e2                      # mov    r10,r12
        4d 29 ea                      # sub    r10,r13
        49 d1 e2                      # shl    r10,1
        41 52                         # push   r10
        41 55                         # push   r13
        41 57                         # push   r15
        jmp scan_loop

scan_loop2:
        48 83 f8 02                   # cmp    rax,0x2
        jne scan_loop3
        4d 89 e2                      # mov    r10,r12
        4d 29 ea                      # sub    r10,r13
        49 d1 e2                      # shl    r10,1
        49 ff c2                      # inc    r10
        41 52                         # push   r10
        41 55                         # push   r13
        41 57                         # push   r15
        ba 7f 00 00 00                # mov    edx,0x7f
        call putc
        call putc
        call putc
        call putc
        jmp scan_loop

scan_loop3:
        48 83 e8 03                   # sub    rax,0x3
        48 6b c0 0c                   # imul   rax,rax,0xc
        48 05 20 20 40 00             # add    rax,0x402020
        41 54                         # push   r12
        41 55                         # push   r13
        4c 8d 68 0a                   # lea    r13,[rax+0xa]
        4c 0f b6 60 09                # movzx  r12,BYTE PTR [rax+0x9]

put_bytes:
        49 0f b6 55 00                # movzx  rdx,BYTE PTR [r13+0x0]
        call putc
        49 ff c5                      # inc    r13
        49 ff cc                      # dec    r12
        4d 85 e4                      # test   r12,r12
        jne put_bytes
        41 5d                         # pop    r13
        41 5c                         # pop    r12
        jmp scan_loop

scan_restart:
        49 ff c4                      # inc    r12

scan:
        49 39 dc                      # cmp    r12,rbx
        jl scan0
        48 c7 c0 ff ff ff ff          # mov    rax,0xffffffffffffffff
        ret

scan0:
        4d 89 e5                      # mov    r13,r12
        49 0f b6 04 24                # movzx  rax,BYTE PTR [r12]
        3c 23                         # cmp    al,0x23
        je scan_comment
        3c 2e                         # cmp    al,0x2e
        je scan_ident
        3c 30                         # cmp    al,0x30
        jl scan_restart
        3c 39                         # cmp    al,0x39
        jle scan_hex
        3c 41                         # cmp    al,0x41
        jl scan_restart
        3c 46                         # cmp    al,0x46
        jle scan_mhex
        3c 5a                         # cmp    al,0x5a
        jle scan_ident
        3c 5f                         # cmp    al,0x5f
        je scan_ident
        3c 61                         # cmp    al,0x61
        jl scan_restart
        3c 66                         # cmp    al,0x66
        jle scan_mhex
        3c 7a                         # cmp    al,0x7a
        jle scan_ident
        jmp scan_restart

scan_mhex:
        49 ff c4                      # inc    r12
        49 39 dc                      # cmp    r12,rbx
        jge scan_hex_end
        49 0f b6 04 24                # movzx  rax,BYTE PTR [r12]
        3c 30                         # cmp    al,0x30
        jl scan_hex_end
        3c 39                         # cmp    al,0x39
        jle scan_mhex
        3c 3a                         # cmp    al,0x3a
        jle scan_label_end
        3c 41                         # cmp    al,0x41
        jl scan_hex_end
        3c 46                         # cmp    al,0x46
        jle scan_mhex
        3c 5a                         # cmp    al,0x5a
        jle scan_ident
        3c 5f                         # cmp    al,0x5f
        je scan_ident
        3c 61                         # cmp    al,0x61
        jl scan_hex_end
        3c 66                         # cmp    al,0x66
        jle scan_mhex
        3c 7a                         # cmp    al,0x7a
        jle scan_ident
        jmp scan_hex_end

scan_hex:
        49 ff c4                      # inc    r12
        49 39 dc                      # cmp    r12,rbx
        jge scan_hex_end
        49 0f b6 04 24                # movzx  rax,BYTE PTR [r12]
        3c 30                         # cmp    al,0x30
        jl scan_hex_end
        3c 39                         # cmp    al,0x39
        jle scan_hex
        3c 41                         # cmp    al,0x41
        jl scan_hex_end
        3c 46                         # cmp    al,0x46
        jle scan_hex
        3c 61                         # cmp    al,0x61
        jl scan_hex_end
        3c 66                         # cmp    al,0x66
        jle scan_hex

scan_hex_end:
        b8 00 00 00 00                # mov    eax,0x0
        ret

scan_ident:
        49 ff c4                      # inc    r12
        49 39 dc                      # cmp    r12,rbx
        jge scan_ident_end
        49 0f b6 04 24                # movzx  rax,BYTE PTR [r12]
        3c 30                         # cmp    al,0x30
        jl scan_ident_end
        3c 39                         # cmp    al,0x39
        jle scan_ident
        3c 3a                         # cmp    al,0x3a
        je scan_label_end
        3c 41                         # cmp    al,0x41
        jl scan_ident_end
        3c 5a                         # cmp    al,0x5a
        jle scan_ident
        3c 5f                         # cmp    al,0x5f
        je scan_ident
        3c 61                         # cmp    al,0x61
        jl scan_ident_end
        3c 7a                         # cmp    al,0x7a
        jle scan_ident

scan_ident_end:
        41 56                         # push   r14
        4d 31 f6                      # xor    r14,r14
        41 57                         # push   r15
        49 bf 20 20 40 00 00          # movabs r15,0x402020
        00 00 00 #
        4c 89 e2                      # mov    rdx,r12
        4c 29 ea                      # sub    rdx,r13
        4c 89 ee                      # mov    rsi,r13

table_loop:
        41 3a 57 08                   # cmp    dl,BYTE PTR [r15+0x8]
        jne table_loop_continue
        49 8b 3f                      # mov    rdi,QWORD PTR [r15]
        call strncmp
        48 85 c0                      # test   rax,rax
        jne table_loop_continue
        4c 89 f0                      # mov    rax,r14
        48 83 c0 03                   # add    rax,0x3
        41 5f                         # pop    r15
        41 5e                         # pop    r14
        ret

table_loop_continue:
        49 83 c7 0c                   # add    r15,0xc
        49 ff c6                      # inc    r14
        49 83 fe 0a                   # cmp    r14,0xa
        jl table_loop
        b8 02 00 00 00                # mov    eax,0x2
        41 5f                         # pop    r15
        41 5e                         # pop    r14
        ret

scan_label_end:
        b8 01 00 00 00                # mov    eax,0x1
        ret

scan_comment:
        49 ff c4                      # inc    r12
        49 39 dc                      # cmp    r12,rbx
        jl scan_comment0
        48 c7 c0 ff ff ff ff          # mov    rax,0xffffffffffffffff
        ret

scan_comment0:
        49 0f b6 04 24                # movzx  rax,BYTE PTR [r12]
        3c 0a                         # cmp    al,0xa
        je scan
        3c 0d                         # cmp    al,0xd
        je scan
        jmp scan_comment

ident_pass:
        4c 89 7d f0                   # mov    QWORD PTR [rbp-0x10],r15
        4c 8d 65 e8                   # lea    r12,[rbp-0x18]

ident_loop:
        49 39 e4                      # cmp    r12,rsp
        jle ident_loop_end
        49 8b 14 24                   # mov    rdx,QWORD PTR [r12]
        48 f7 c2 01 00 00 00          # test   rdx,0x1
        je ident_loop_continue
        48 d1 ea                      # shr    rdx,1
        49 8b 7c 24 f8                # mov    rdi,QWORD PTR [r12-0x8]
        4c 8d 6d e8                   # lea    r13,[rbp-0x18]

label_loop:
        49 39 e5                      # cmp    r13,rsp
        jle label_loop_end
        4d 8b 55 00                   # mov    r10,QWORD PTR [r13+0x0]
        49 f7 c2 01 00 00 00          # test   r10,0x1
        jne label_loop_continue
        49 d1 ea                      # shr    r10,1
        49 39 d2                      # cmp    r10,rdx
        jne label_loop_continue
        49 8b 75 f8                   # mov    rsi,QWORD PTR [r13-0x8]
        call strncmp
        48 85 c0                      # test   rax,rax
        jne label_loop_continue
        4d 8b 55 f0                   # mov    r10,QWORD PTR [r13-0x10]
        4d 2b 54 24 f0                # sub    r10,QWORD PTR [r12-0x10]
        49 83 ea 04                   # sub    r10,0x4
        4d 8b 5c 24 f0                # mov    r11,QWORD PTR [r12-0x10]
        45 89 13                      # mov    DWORD PTR [r11],r10d
        jmp ident_loop_continue

label_loop_continue:
        49 83 ed 18                   # sub    r13,0x18
        jmp label_loop

label_loop_end:
        jmp exit_failure

ident_loop_continue:
        49 83 ec 18                   # sub    r12,0x18
        jmp ident_loop

ident_loop_end:
        jmp exit

stdin_to_heap:
        b8 0c 00 00 00                # mov    eax,0xc
        48 31 ff                      # xor    rdi,rdi
        syscall
        48 89 c6                      # mov    rsi,rax
        49 89 c4                      # mov    r12,rax
        ba 40 00 00 00                # mov    edx,0x40

stdin_to_heap0:
        48 8d 7e 40                   # lea    rdi,[rsi+0x40]
        b8 0c 00 00 00                # mov    eax,0xc
        syscall
        48 31 c0                      # xor    rax,rax
        48 31 ff                      # xor    rdi,rdi
        syscall
        48 83 f8 40                   # cmp    rax,0x40
        jl stdin_to_heap1
        48 83 c6 40                   # add    rsi,0x40
        jmp stdin_to_heap0

stdin_to_heap1:
        48 8d 1c 06                   # lea    rbx,[rsi+rax*1]
        4c 8d 76 40                   # lea    r14,[rsi+0x40]
        ret

strncmp:
        31 c0                         # xor    eax,eax
        48 85 d2                      # test   rdx,rdx
        jne strncmp2
        jmp strncmp5

strncmp1:
        44 38 c1                      # cmp    cl,r8b
        jne strncmp3
        48 ff c0                      # inc    rax
        48 39 c2                      # cmp    rdx,rax
        je strncmp4

strncmp2:
        0f b6 0c 07                   # movzx  ecx,BYTE PTR [rdi+rax*1]
        44 0f b6 04 06                # movzx  r8d,BYTE PTR [rsi+rax*1]
        84 c9                         # test   cl,cl
        jne strncmp1

strncmp3:
        0f b6 c1                      # movzx  eax,cl
        44 29 c0                      # sub    eax,r8d
        ret

strncmp4:
        31 c0                         # xor    eax,eax

strncmp5:
        ret

hex_to_byte:
        80 fa 39                      # cmp    dl,0x39
        jg hex_to_byte1
        80 ea 30                      # sub    dl,0x30
        jmp hex_to_byte3

hex_to_byte1:
        80 fa 46                      # cmp    dl,0x46
        jg hex_to_byte2
        80 ea 37                      # sub    dl,0x37
        jmp hex_to_byte3

hex_to_byte2:
        80 ea 57                      # sub    dl,0x57

hex_to_byte3:
        ret

putc:
        4d 39 f7                      # cmp    r15,r14
        jl putc0
        49 8d 7e 40                   # lea    rdi,[r14+0x40]
        b8 0c 00 00 00                # mov    eax,0xc
        syscall
        49 89 fe                      # mov    r14,rdi

putc0:
        41 88 17                      # mov    BYTE PTR [r15],dl
        49 ff c7                      # inc    r15
        ret

flush:
        b8 01 00 00 00                # mov    eax,0x1
        bf 01 00 00 00                # mov    edi,0x1
        syscall
        ret

exit:
        48 8b 75 f8                   # mov    rsi,QWORD PTR [rbp-0x8]
        48 8b 55 f0                   # mov    rdx,QWORD PTR [rbp-0x10]
        48 29 f2                      # sub    rdx,rsi
        call flush
        b8 3c 00 00 00                # mov    eax,0x3c
        bf 00 00 00 00                # mov    edi,0x0
        syscall

exit_failure:
        b8 3c 00 00 00                # mov    eax,0x3c
        bf 01 00 00 00                # mov    edi,0x1
        syscall
# +0x049C
# [0x149C]

# Padding to align to 0x2000


################################      ###############################
# .rodata Section - [0x2000]                                  #
################################      ###############################

# [0x2000]
# Instruction Mnemonic Table
63 61 6c 6c           # [0x2000]    "call"
6a 65                 # [0x2004]    "je"
6a 67                 # [0x2006]    "jg"
6a 67 65              # [0x2008]    "jge"
6a 6c                 # [0x200B]    "jl"
6a 6c 65              # [0x200D]    "jle"
6a 6d 70              # [0x2010]    "jmp"
6a 6e 65              # [0x2013]    "jne"
72 65 74              # [0x2016]    "ret"
73 79 73 63 61 6c 6c  # [0x2019]    "syscall"
# +0x0020

# [0x2020]
# Instruction Lookup Table
# Mnemonic Address,      M. Length, Ins. Length, Instructions
00 20 40 00 00 00 00 00  04         01           e8 00        # call
04 20 40 00 00 00 00 00  02         02           0f 84        # je
06 20 40 00 00 00 00 00  02         02           0f 8f        # jg
08 20 40 00 00 00 00 00  03         02           0f 8d        # jge
0b 20 40 00 00 00 00 00  02         02           0f 8c        # jl
0d 20 40 00 00 00 00 00  03         02           0f 8e        # jle
10 20 40 00 00 00 00 00  03         01           e9 00        # jmp
13 20 40 00 00 00 00 00  03         02           0f 85        # jne
16 20 40 00 00 00 00 00  03         01           c3 00        # ret
19 20 40 00 00 00 00 00  07         02           0f 05        # syscall
# +0x0078

################################      ###############################
# Section Header Name Table - [0x2098]                        #
################################      ###############################

# [0x2098]
# Section Header Name Table 
00                               # Leading Zero Byte +0x1
2e 73 68 73 74 72 74 61 62 00    # ".shstrtab"       +0xA
2e 74 65 78 74 00                # ".text"           +0x6
2e 72 6f 64 61 74 61 00          # ".rodata"         +0x8
# +0x0019

# [0x20B1]
# Padding
00000000000000

################################      ###############################
# Section Header Table - [0x20B8]                             #
################################      ###############################

# [0x20B8]
# Section Table 0 (Reserved)
00 00 00 00              # sh_name
00 00 00 00              # sh_type
00 00 00 00 00 00 00 00  # sh_flags
00 00 00 00 00 00 00 00  # sh_addr
00 00 00 00 00 00 00 00  # sh_offset
00 00 00 00 00 00 00 00  # sh_size
00 00 00 00              # sh_link
00 00 00 00              # sh_info
00 00 00 00 00 00 00 00  # sh_addralign
00 00 00 00 00 00 00 00  # sh_entsize
# +0x0040

# [0x20F8]
# Section Table 1 (.text)
0b 00 00 00              # sh_name:        ".text"
01 00 00 00              # sh_type:        SHT_PROGBITS - Program Data
06 00 00 00 00 00 00 00  # sh_flags:       SHF_ALLOC|SHF_EXECINSTR - Occupies Memory and is Executable
00 10 40 00 00 00 00 00  # sh_addr:      * Virtual address in memory if loaded
00 10 00 00 00 00 00 00  # sh_offset:    * Offset in File Image
9c 04 00 00 00 00 00 00  # sh_size:      * Size in File Image
00 00 00 00              # sh_link:        Associated Section Index
00 00 00 00              # sh_info:        Extra Info
10 00 00 00 00 00 00 00  # sh_addralign:   Alignment
00 00 00 00 00 00 00 00  # sh_entsize:     Fixed Size Entry Size
# +0x0040

# [0x2138]
# Section Table 2 (.rodata)
11 00 00 00              # sh_name         ".rodata"
01 00 00 00              # sh_type         SHT_PROGBITS - Program Data
02 00 00 00 00 00 00 00  # sh_flags        SHF_ALLOC - Occupies Memory
00 20 40 00 00 00 00 00  # sh_addr       * Virtual Address
00 20 00 00 00 00 00 00  # sh_offset     * Offset in File Image
98 00 00 00 00 00 00 00  # sh_size       * Size in File Image
00 00 00 00              # sh_link         
00 00 00 00              # sh_info         
04 00 00 00 00 00 00 00  # sh_addralign    
00 00 00 00 00 00 00 00  # sh_entsize      
# +0x0040

# [0x2178]
# Section Table 3 (.shstrtab)
01 00 00 00              # sh_name:        ".shstrtab"
03 00 00 00              # sh_type:        SHT_STRTAB - String Table
00 00 00 00 00 00 00 00  # sh_flags:       None
00 00 00 00 00 00 00 00  # sh_addr:        Virtual address in memory if loaded
98 20 00 00 00 00 00 00  # sh_offset:    * Offset in File Image
19 00 00 00 00 00 00 00  # sh_size:        Size in File Image
00 00 00 00              # sh_link:        Associated Section Index
00 00 00 00              # sh_info:        Extra Info
01 00 00 00 00 00 00 00  # sh_addralign:   Alignment
00 00 00 00 00 00 00 00  # sh_entsize:     Fixed Size Entry Size
# +0x0040

# [0x21B0]