#define INSTRUCTION(_mnemonic, ...) { \
    .mnemonic = #_mnemonic,\
    .encodings = (const EncodingInstruction[]){__VA_ARGS__},\
    .encoding_count = countof((EncodingInstruction[]){__VA_ARGS__}),\
  }

#define ENCODING(opcode, _rex_w, _ext, ...) { \
    .op_code = { \
        ((opcode) >> 24) & 0xFFu, \
        ((opcode) >> 16) & 0xFFu, \
        ((opcode) >>  8) & 0xFFu, \
        ((opcode) >>  0) & 0xFFu, \
      }, \
    .rex_w = _rex_w, \
    .extension = _ext, \
    .operands = { __VA_ARGS__ }, \
    .operand_count = countof((EncodingOperand[]){__VA_ARGS__}), \
  }

#define REX_NONE 0
#define REX_W    1

#define NONE { .type = ENCODING_EXTENSION_TYPE_NONE, }

#define MODRM(_mod, _reg, _r_m) { \
        .type = ENCODING_EXTENSION_TYPE_MOD_RM, \
        .mod_rm = { \
            .mod = ENCODING_EXTENSION_MODRM_MOD_ ## _mod, \
            .reg = ENCODING_EXTENSION_MODRM_REG_ ## _reg, \
            .r_m = ENCODING_EXTENSION_MODRM_R_M_ ## _r_m, \
        }, \
    }

#define PREFIX(_value) { \
        .type = ENCODING_EXTENSION_TYPE_PREFIX, \
        .prefix = { \
            .value = _value, \
        }, \
    }

#define PLUS_R(_reg) { \
        .type = ENCODING_EXTENSION_TYPE_PLUS_R, \
        .plus_r = { \
            .reg = _reg, \
        }, \
    }

#define OP_R8    { .type=ENCODING_OPERAND_TYPE_REGISTER, .reg_size=S8  }
#define OP_R16   { .type=ENCODING_OPERAND_TYPE_REGISTER, .reg_size=S16 }
#define OP_R32   { .type=ENCODING_OPERAND_TYPE_REGISTER, .reg_size=S32 }
#define OP_R64   { .type=ENCODING_OPERAND_TYPE_REGISTER, .reg_size=S64 }

#define OP_A8    { .type=ENCODING_OPERAND_TYPE_REGISTER_A, .reg_size=S8  }
#define OP_A16   { .type=ENCODING_OPERAND_TYPE_REGISTER_A, .reg_size=S16 }
#define OP_A32   { .type=ENCODING_OPERAND_TYPE_REGISTER_A, .reg_size=S32 }
#define OP_A64   { .type=ENCODING_OPERAND_TYPE_REGISTER_A, .reg_size=S64 }

#define OP_C8    { .type=ENCODING_OPERAND_TYPE_REGISTER_CL, .reg_size=S8 }

#define OP_M8    { .type=ENCODING_OPERAND_TYPE_MEMORY }
#define OP_M16   { .type=ENCODING_OPERAND_TYPE_MEMORY }
#define OP_M32   { .type=ENCODING_OPERAND_TYPE_MEMORY }
#define OP_M64   { .type=ENCODING_OPERAND_TYPE_MEMORY }
#define OP_M128  { .type=ENCODING_OPERAND_TYPE_MEMORY }
#define OP_M     { .type=ENCODING_OPERAND_TYPE_MEMORY }

#define OP_REL8  { .type=ENCODING_OPERAND_TYPE_REL, .rel_size=S8  }
#define OP_REL32 { .type=ENCODING_OPERAND_TYPE_REL, .rel_size=S32 }

#define OP_MOFFS32 { .type=ENCODING_OPERAND_TYPE_MOFFS }
#define OP_MOFFS64 { .type=ENCODING_OPERAND_TYPE_MOFFS }

#define OP_IMM8  { .type=ENCODING_OPERAND_TYPE_IMMEDIATE, .imm_size=8  }
#define OP_IMM16 { .type=ENCODING_OPERAND_TYPE_IMMEDIATE, .imm_size=16 }
#define OP_IMM32 { .type=ENCODING_OPERAND_TYPE_IMMEDIATE, .imm_size=32 }
#define OP_IMM64 { .type=ENCODING_OPERAND_TYPE_IMMEDIATE, .imm_size=64 }

#define OP_1 { .type=ENCODING_OPERAND_TYPE_1, .imm_size=8 }
#define OP_3 { .type=ENCODING_OPERAND_TYPE_3, .imm_size=8 }

const Instruction instructions[] = {
  INSTRUCTION(adc,
    ENCODING(0x14, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 2, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x10, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x12, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x12, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x15, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 2, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 2, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x11, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x13, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x13, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x15, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 2, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 2, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x11, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x13, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x13, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x15, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 2, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 2, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x11, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x13, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x13, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x10, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x11, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x11, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 2, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 2, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x11, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(add,
    ENCODING(0x04, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 0, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x00, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x02, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x02, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x05, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 0, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 0, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x01, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x03, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x03, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x05, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 0, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 0, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x01, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x03, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x03, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x05, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 0, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 0, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x01, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x03, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x03, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x00, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x01, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x01, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 0, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 0, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x01, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(and,
    ENCODING(0x24, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 4, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x20, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x22, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x22, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x25, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x21, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x23, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x23, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x25, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x21, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x23, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x23, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x25, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x21, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x23, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x23, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x20, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x21, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x21, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x21, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(bsf,
    ENCODING(0x0FBC, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x0FBC, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x0FBC, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x0FBC, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x0FBC, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x0FBC, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
  ),
  INSTRUCTION(bsr,
    ENCODING(0x0FBD, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x0FBD, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x0FBD, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x0FBD, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x0FBD, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x0FBD, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
  ),
  INSTRUCTION(bswap,
    ENCODING(0x0FC8, REX_NONE, PLUS_R(0), OP_R32),
    ENCODING(0x0FC8, REX_W, PLUS_R(0), OP_R64),
  ),
  INSTRUCTION(bt,
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x0FA3, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x0FA3, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x0FA3, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x0FA3, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x0FA3, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x0FA3, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(btc,
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 7, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x0FBB, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 7, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x0FBB, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(REG, 7, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x0FBB, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x0FBB, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x0FBB, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(OP_0, 7, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x0FBB, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(btr,
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 6, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x0FB3, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 6, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x0FB3, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(REG, 6, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x0FB3, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x0FB3, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x0FB3, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(OP_0, 6, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x0FB3, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(bts,
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 5, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x0FAB, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(REG, 5, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x0FAB, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(REG, 5, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x0FAB, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x0FAB, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x0FBA, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x0FAB, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x0FBA, REX_W, MODRM(OP_0, 5, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x0FAB, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(call,
    ENCODING(0xE8, REX_NONE, NONE, OP_REL32),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 2, OP_0), OP_R64),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M64),
  ),
  INSTRUCTION(cbw,
    ENCODING(0x98, REX_NONE, NONE),
  ),
  INSTRUCTION(cdq,
    ENCODING(0x99, REX_NONE, NONE),
  ),
  INSTRUCTION(cdqe,
    ENCODING(0x98, REX_W, NONE),
  ),
  INSTRUCTION(clc,
    ENCODING(0xF8, REX_NONE, NONE),
  ),
  INSTRUCTION(cld,
    ENCODING(0xFC, REX_NONE, NONE),
  ),
  INSTRUCTION(cmc,
    ENCODING(0xF5, REX_NONE, NONE),
  ),
  INSTRUCTION(cmp,
    ENCODING(0x3C, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 7, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x38, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x3A, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x3A, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x3D, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 7, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 7, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x39, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x3B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x3B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x3D, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 7, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 7, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x39, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x3B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x3B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x3D, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 7, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 7, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x39, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x3B, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x3B, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x38, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x39, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x39, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 7, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 7, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x39, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(cmpxchg,
    ENCODING(0x0FB0, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x0FB1, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x0FB1, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x0FB1, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x0FB0, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x0FB1, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x0FB1, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x0FB1, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(cmpxchg16b,
    ENCODING(0x0FC7, REX_W, MODRM(OP_0, 1, OP_0), OP_M128),
  ),
  INSTRUCTION(cmpxchg8b,
    ENCODING(0x0FC7, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M64),
  ),
  INSTRUCTION(cqo,
    ENCODING(0x99, REX_W, NONE),
  ),
  INSTRUCTION(cwd,
    ENCODING(0x99, REX_NONE, NONE),
  ),
  INSTRUCTION(cwde,
    ENCODING(0x98, REX_NONE, NONE),
  ),
  INSTRUCTION(dec,
    ENCODING(0xFE, REX_NONE, MODRM(REG, 1, OP_0), OP_R8),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 1, OP_0), OP_R16),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 1, OP_0), OP_R32),
    ENCODING(0xFF, REX_W, MODRM(REG, 1, OP_0), OP_R64),
    ENCODING(0xFE, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M8),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M16),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M32),
    ENCODING(0xFF, REX_W, MODRM(OP_0, 1, OP_0), OP_M64),
  ),
  INSTRUCTION(div,
    ENCODING(0xF6, REX_NONE, MODRM(REG, 6, OP_0), OP_R8),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 6, OP_0), OP_R16),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 6, OP_0), OP_R32),
    ENCODING(0xF7, REX_W, MODRM(REG, 6, OP_0), OP_R64),
    ENCODING(0xF6, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M8),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M16),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M32),
    ENCODING(0xF7, REX_W, MODRM(OP_0, 6, OP_0), OP_M64),
  ),
  INSTRUCTION(idiv,
    ENCODING(0xF6, REX_NONE, MODRM(REG, 7, OP_0), OP_R8),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 7, OP_0), OP_R16),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 7, OP_0), OP_R32),
    ENCODING(0xF7, REX_W, MODRM(REG, 7, OP_0), OP_R64),
    ENCODING(0xF6, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M8),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M16),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M32),
    ENCODING(0xF7, REX_W, MODRM(OP_0, 7, OP_0), OP_M64),
  ),
  INSTRUCTION(imul,
    ENCODING(0xF6, REX_NONE, MODRM(REG, 5, OP_0), OP_R8),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 5, OP_0), OP_R16),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 5, OP_0), OP_R32),
    ENCODING(0xF7, REX_W, MODRM(REG, 5, OP_0), OP_R64),
    ENCODING(0xF6, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M8),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M16),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M32),
    ENCODING(0xF7, REX_W, MODRM(OP_0, 5, OP_0), OP_M64),
    ENCODING(0x0FAF, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x0FAF, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x0FAF, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x0FAF, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x0FAF, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x0FAF, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x6B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16, OP_IMM8),
    ENCODING(0x69, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16, OP_IMM16),
    ENCODING(0x6B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16, OP_IMM8),
    ENCODING(0x69, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16, OP_IMM16),
    ENCODING(0x6B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32, OP_IMM8),
    ENCODING(0x69, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32, OP_IMM32),
    ENCODING(0x6B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32, OP_IMM8),
    ENCODING(0x69, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32, OP_IMM32),
    ENCODING(0x6B, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64, OP_IMM8),
    ENCODING(0x69, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64, OP_IMM32),
    ENCODING(0x6B, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64, OP_IMM8),
    ENCODING(0x69, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64, OP_IMM32),
  ),
  INSTRUCTION(inc,
    ENCODING(0xFE, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 0, OP_0), OP_R16),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 0, OP_0), OP_R32),
    ENCODING(0xFF, REX_W, MODRM(REG, 0, OP_0), OP_R64),
    ENCODING(0xFE, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32),
    ENCODING(0xFF, REX_W, MODRM(OP_0, 0, OP_0), OP_M64),
  ),
  INSTRUCTION(int,
    ENCODING(0xCC, REX_NONE, NONE, OP_3),
    ENCODING(0xCD, REX_NONE, NONE, OP_IMM8),
  ),
  INSTRUCTION(ja,
    ENCODING(0x77, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F87, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jae,
    ENCODING(0x73, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F83, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jb,
    ENCODING(0x72, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F82, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jbe,
    ENCODING(0x76, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F86, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jc,
    ENCODING(0x72, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F82, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(je,
    ENCODING(0x74, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F84, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jecxz,
    ENCODING(0xE3, REX_NONE, NONE, OP_REL8),
  ),
  INSTRUCTION(jg,
    ENCODING(0x7F, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8F, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jge,
    ENCODING(0x7D, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8D, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jl,
    ENCODING(0x7C, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8C, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jle,
    ENCODING(0x7E, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8E, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jmp,
    ENCODING(0xEB, REX_NONE, NONE, OP_REL8),
    ENCODING(0xE9, REX_NONE, NONE, OP_REL32),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 4, OP_0), OP_R64),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M64),
  ),
  INSTRUCTION(jna,
    ENCODING(0x76, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F86, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnae,
    ENCODING(0x72, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F82, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnb,
    ENCODING(0x73, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F83, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnbe,
    ENCODING(0x77, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F87, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnc,
    ENCODING(0x73, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F83, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jne,
    ENCODING(0x75, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F85, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jng,
    ENCODING(0x7E, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8E, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnge,
    ENCODING(0x7C, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8C, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnl,
    ENCODING(0x7D, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8D, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnle,
    ENCODING(0x7F, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8F, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jno,
    ENCODING(0x71, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F81, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnp,
    ENCODING(0x7B, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8B, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jns,
    ENCODING(0x79, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F89, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jnz,
    ENCODING(0x75, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F85, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jo,
    ENCODING(0x70, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F80, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jp,
    ENCODING(0x7A, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8A, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jpe,
    ENCODING(0x7A, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8A, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jpo,
    ENCODING(0x7B, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F8B, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jrcxz,
    ENCODING(0xE3, REX_NONE, NONE, OP_REL8),
  ),
  INSTRUCTION(js,
    ENCODING(0x78, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F88, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(jz,
    ENCODING(0x74, REX_NONE, NONE, OP_REL8),
    ENCODING(0x0F84, REX_NONE, NONE, OP_REL32),
  ),
  INSTRUCTION(lea,
    ENCODING(0x8D, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M),
    ENCODING(0x8D, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M),
    ENCODING(0x8D, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M),
  ),
  INSTRUCTION(mov,
    ENCODING(0xC6, REX_NONE, MODRM(REG, 0, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xB0, REX_NONE, PLUS_R(0), OP_R8, OP_IMM8),
    ENCODING(0x88, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x8A, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x8A, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0xC7, REX_NONE, MODRM(REG, 0, OP_0), OP_R16, OP_IMM16),
    ENCODING(0xB8, REX_NONE, PLUS_R(0), OP_R16, OP_IMM16),
    ENCODING(0x89, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x8B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x8B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0xA0, REX_NONE, NONE, OP_A8, OP_MOFFS32),
    ENCODING(0xA1, REX_NONE, NONE, OP_A16, OP_MOFFS32),
    ENCODING(0xA1, REX_NONE, NONE, OP_A32, OP_MOFFS32),
    ENCODING(0xC7, REX_NONE, MODRM(REG, 0, OP_0), OP_R32, OP_IMM32),
    ENCODING(0xB8, REX_NONE, PLUS_R(0), OP_R32, OP_IMM32),
    ENCODING(0x89, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x8B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x8B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0xA1, REX_W, NONE, OP_A64, OP_MOFFS64),
    ENCODING(0xC7, REX_W, MODRM(REG, 0, OP_0), OP_R64, OP_IMM32),
    ENCODING(0xB8, REX_W, PLUS_R(0), OP_R64, OP_IMM64),
    ENCODING(0x89, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x8B, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x8B, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0xC6, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x88, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0xC7, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x89, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0xC7, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x89, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0xC7, REX_W, MODRM(OP_0, 0, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x89, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
    ENCODING(0xA3, REX_NONE, NONE, OP_MOFFS32, OP_A32),
    ENCODING(0xA3, REX_W, NONE, OP_MOFFS64, OP_A64),
  ),
  INSTRUCTION(movsx,
    ENCODING(0x0FBE, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R8),
    ENCODING(0x0FBE, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M8),
    ENCODING(0x0FBE, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R8),
    ENCODING(0x0FBF, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R16),
    ENCODING(0x0FBE, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M8),
    ENCODING(0x0FBF, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M16),
    ENCODING(0x0FBE, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R8),
    ENCODING(0x0FBF, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R16),
    ENCODING(0x0FBE, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M8),
    ENCODING(0x0FBF, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M16),
  ),
  INSTRUCTION(movsxd,
    ENCODING(0x63, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R32),
    ENCODING(0x63, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M32),
  ),
  INSTRUCTION(movzx,
    ENCODING(0x0FB6, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R8),
    ENCODING(0x0FB6, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M8),
    ENCODING(0x0FB6, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R8),
    ENCODING(0x0FB7, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R16),
    ENCODING(0x0FB6, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M8),
    ENCODING(0x0FB7, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M16),
    ENCODING(0x0FB6, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R8),
    ENCODING(0x0FB7, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R16),
    ENCODING(0x0FB6, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M8),
    ENCODING(0x0FB7, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M16),
  ),
  INSTRUCTION(mul,
    ENCODING(0xF6, REX_NONE, MODRM(REG, 4, OP_0), OP_R8),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 4, OP_0), OP_R16),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 4, OP_0), OP_R32),
    ENCODING(0xF7, REX_W, MODRM(REG, 4, OP_0), OP_R64),
    ENCODING(0xF6, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32),
    ENCODING(0xF7, REX_W, MODRM(OP_0, 4, OP_0), OP_M64),
  ),
  INSTRUCTION(neg,
    ENCODING(0xF6, REX_NONE, MODRM(REG, 3, OP_0), OP_R8),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 3, OP_0), OP_R16),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 3, OP_0), OP_R32),
    ENCODING(0xF7, REX_W, MODRM(REG, 3, OP_0), OP_R64),
    ENCODING(0xF6, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M8),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M16),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M32),
    ENCODING(0xF7, REX_W, MODRM(OP_0, 3, OP_0), OP_M64),
  ),
  INSTRUCTION(nop,
    ENCODING(0x90, REX_NONE, NONE),
  ),
  INSTRUCTION(not,
    ENCODING(0xF6, REX_NONE, MODRM(REG, 2, OP_0), OP_R8),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 2, OP_0), OP_R16),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 2, OP_0), OP_R32),
    ENCODING(0xF7, REX_W, MODRM(REG, 2, OP_0), OP_R64),
    ENCODING(0xF6, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M8),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M16),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M32),
    ENCODING(0xF7, REX_W, MODRM(OP_0, 2, OP_0), OP_M64),
  ),
  INSTRUCTION(or,
    ENCODING(0x0C, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 1, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x08, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x0A, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x0A, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x0D, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 1, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 1, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x09, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x0B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x0B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x0D, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 1, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 1, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x09, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x0B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x0B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x0D, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 1, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 1, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x09, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x0B, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x0B, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x08, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x09, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x09, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 1, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 1, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x09, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(pause,
    ENCODING(0x90, REX_NONE, PREFIX(0xF3)),
  ),
  INSTRUCTION(pop,
    ENCODING(0x58, REX_NONE, PLUS_R(0), OP_R16),
    ENCODING(0x8F, REX_NONE, MODRM(REG, 0, OP_0), OP_R16),
    ENCODING(0x58, REX_NONE, PLUS_R(0), OP_R64),
    ENCODING(0x8F, REX_NONE, MODRM(REG, 0, OP_0), OP_R64),
    ENCODING(0x8F, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16),
    ENCODING(0x8F, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M64),
  ),
  INSTRUCTION(push,
    ENCODING(0x6A, REX_NONE, NONE, OP_IMM8),
    ENCODING(0x68, REX_NONE, NONE, OP_IMM32),
    ENCODING(0x50, REX_NONE, PLUS_R(0), OP_R16),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 6, OP_0), OP_R16),
    ENCODING(0x50, REX_NONE, PLUS_R(0), OP_R64),
    ENCODING(0xFF, REX_NONE, MODRM(REG, 6, OP_0), OP_R64),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M16),
    ENCODING(0xFF, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M64),
  ),
  INSTRUCTION(rcl,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 2, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 2, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 2, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 2, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 2, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 2, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 2, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 2, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 2, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 2, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 2, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 2, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 2, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 2, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 2, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 2, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(rcr,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 3, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 3, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 3, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 3, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 3, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 3, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 3, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 3, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 3, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 3, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 3, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 3, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 3, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 3, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 3, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(ret,
    ENCODING(0xC3, REX_NONE, NONE),
    ENCODING(0xC2, REX_NONE, NONE, OP_IMM16),
  ),
  INSTRUCTION(rol,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 0, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 0, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 0, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 0, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 0, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 0, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 0, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 0, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 0, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 0, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 0, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 0, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 0, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 0, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 0, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(ror,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 1, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 1, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 1, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 1, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 1, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 1, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 1, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 1, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 1, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 1, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 1, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 1, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 1, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 1, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 1, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 1, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(sal,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 4, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 4, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 4, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(sar,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 7, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 7, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 7, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 7, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 7, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 7, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 7, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 7, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 7, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 7, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 7, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 7, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 7, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 7, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 7, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 7, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(sbb,
    ENCODING(0x1C, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 3, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x18, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x1A, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x1A, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x1D, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 3, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 3, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x19, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x1B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x1B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x1D, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 3, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 3, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x19, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x1B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x1B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x1D, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 3, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 3, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x19, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x1B, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x1B, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x18, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x19, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 3, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x19, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 3, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 3, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x19, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(seta,
    ENCODING(0x0F97, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F97, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setae,
    ENCODING(0x0F93, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F93, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setb,
    ENCODING(0x0F92, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F92, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setbe,
    ENCODING(0x0F96, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F96, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setc,
    ENCODING(0x0F92, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F92, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(sete,
    ENCODING(0x0F94, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F94, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setg,
    ENCODING(0x0F9F, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9F, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setge,
    ENCODING(0x0F9D, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9D, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setl,
    ENCODING(0x0F9C, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9C, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setle,
    ENCODING(0x0F9E, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9E, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setna,
    ENCODING(0x0F96, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F96, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnae,
    ENCODING(0x0F92, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F92, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnb,
    ENCODING(0x0F93, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F93, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnbe,
    ENCODING(0x0F97, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F97, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnc,
    ENCODING(0x0F93, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F93, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setne,
    ENCODING(0x0F95, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F95, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setng,
    ENCODING(0x0F9E, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9E, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnge,
    ENCODING(0x0F9C, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9C, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnl,
    ENCODING(0x0F9D, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9D, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnle,
    ENCODING(0x0F9F, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9F, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setno,
    ENCODING(0x0F91, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F91, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnp,
    ENCODING(0x0F9B, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9B, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setns,
    ENCODING(0x0F99, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F99, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setnz,
    ENCODING(0x0F95, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F95, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(seto,
    ENCODING(0x0F90, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F90, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setp,
    ENCODING(0x0F9A, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9A, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setpe,
    ENCODING(0x0F9A, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9A, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setpo,
    ENCODING(0x0F9B, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F9B, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(sets,
    ENCODING(0x0F98, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F98, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(setz,
    ENCODING(0x0F94, REX_NONE, MODRM(REG, 0, OP_0), OP_R8),
    ENCODING(0x0F94, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8),
  ),
  INSTRUCTION(shl,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 4, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 4, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 4, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 4, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 4, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 4, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 4, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 4, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(shld,
    ENCODING(0x0FA4, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16, OP_IMM8),
    ENCODING(0x0FA5, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16, OP_C8),
    ENCODING(0x0FA4, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32, OP_IMM8),
    ENCODING(0x0FA5, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32, OP_C8),
    ENCODING(0x0FA4, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64, OP_IMM8),
    ENCODING(0x0FA5, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64, OP_C8),
    ENCODING(0x0FA4, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16, OP_IMM8),
    ENCODING(0x0FA5, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16, OP_C8),
    ENCODING(0x0FA4, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32, OP_IMM8),
    ENCODING(0x0FA5, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32, OP_C8),
    ENCODING(0x0FA4, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64, OP_IMM8),
    ENCODING(0x0FA5, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64, OP_C8),
  ),
  INSTRUCTION(shr,
    ENCODING(0xD0, REX_NONE, MODRM(REG, 5, OP_0), OP_R8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(REG, 5, OP_0), OP_R8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(REG, 5, OP_0), OP_R8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 5, OP_0), OP_R16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 5, OP_0), OP_R16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 5, OP_0), OP_R16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(REG, 5, OP_0), OP_R32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(REG, 5, OP_0), OP_R32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(REG, 5, OP_0), OP_R32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(REG, 5, OP_0), OP_R64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(REG, 5, OP_0), OP_R64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(REG, 5, OP_0), OP_R64, OP_C8),
    ENCODING(0xD0, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M8, OP_1),
    ENCODING(0xC0, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M8, OP_IMM8),
    ENCODING(0xD2, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M8, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M16, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M16, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M16, OP_C8),
    ENCODING(0xD1, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M32, OP_1),
    ENCODING(0xC1, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M32, OP_IMM8),
    ENCODING(0xD3, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M32, OP_C8),
    ENCODING(0xD1, REX_W, MODRM(OP_0, 5, OP_0), OP_M64, OP_1),
    ENCODING(0xC1, REX_W, MODRM(OP_0, 5, OP_0), OP_M64, OP_IMM8),
    ENCODING(0xD3, REX_W, MODRM(OP_0, 5, OP_0), OP_M64, OP_C8),
  ),
  INSTRUCTION(shrd,
    ENCODING(0x0FAC, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16, OP_IMM8),
    ENCODING(0x0FAD, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16, OP_C8),
    ENCODING(0x0FAC, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32, OP_IMM8),
    ENCODING(0x0FAD, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32, OP_C8),
    ENCODING(0x0FAC, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64, OP_IMM8),
    ENCODING(0x0FAD, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64, OP_C8),
    ENCODING(0x0FAC, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16, OP_IMM8),
    ENCODING(0x0FAD, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16, OP_C8),
    ENCODING(0x0FAC, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32, OP_IMM8),
    ENCODING(0x0FAD, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32, OP_C8),
    ENCODING(0x0FAC, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64, OP_IMM8),
    ENCODING(0x0FAD, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64, OP_C8),
  ),
  INSTRUCTION(stc,
    ENCODING(0xF9, REX_NONE, NONE),
  ),
  INSTRUCTION(std,
    ENCODING(0xFD, REX_NONE, NONE),
  ),
  INSTRUCTION(sub,
    ENCODING(0x2C, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 5, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x28, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x2A, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x2A, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x2D, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 5, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 5, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x29, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x2B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x2B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x2D, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 5, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 5, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x29, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x2B, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x2B, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x2D, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 5, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 5, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x29, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x2B, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x2B, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x28, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x29, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 5, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x29, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 5, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 5, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x29, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(syscall,
    ENCODING(0x0F05, REX_NONE, NONE),
  ),
  INSTRUCTION(test,
    ENCODING(0xA8, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0xF6, REX_NONE, MODRM(REG, 0, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x84, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0xA9, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 0, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x85, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0xA9, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0xF7, REX_NONE, MODRM(REG, 0, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x85, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0xA9, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0xF7, REX_W, MODRM(REG, 0, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x85, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0xF6, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x84, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x85, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0xF7, REX_NONE, MODRM(OP_0, 0, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x85, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0xF7, REX_W, MODRM(OP_0, 0, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x85, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(ud2,
    ENCODING(0x0F0B, REX_NONE, NONE),
  ),
  INSTRUCTION(xadd,
    ENCODING(0x0FC0, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x0FC1, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x0FC1, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x0FC1, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x0FC0, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x0FC1, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x0FC1, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x0FC1, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(xchg,
    ENCODING(0x86, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x86, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x86, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x90, REX_NONE, PLUS_R(1), OP_A16, OP_R16),
    ENCODING(0x90, REX_NONE, PLUS_R(0), OP_R16, OP_A16),
    ENCODING(0x87, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x87, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x87, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x90, REX_NONE, PLUS_R(1), OP_A32, OP_R32),
    ENCODING(0x90, REX_NONE, PLUS_R(0), OP_R32, OP_A32),
    ENCODING(0x87, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x87, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x87, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x90, REX_W, PLUS_R(1), OP_A64, OP_R64),
    ENCODING(0x90, REX_W, PLUS_R(0), OP_R64, OP_A64),
    ENCODING(0x87, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x87, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x87, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x86, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x87, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x87, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x87, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
  INSTRUCTION(xgetbv,
    ENCODING(0x0F01D0, REX_NONE, NONE),
  ),
  INSTRUCTION(xlatb,
    ENCODING(0xD7, REX_NONE, NONE),
    ENCODING(0xD7, REX_W, NONE),
  ),
  INSTRUCTION(xor,
    ENCODING(0x34, REX_NONE, NONE, OP_A8, OP_IMM8),
    ENCODING(0x80, REX_NONE, MODRM(REG, 6, OP_0), OP_R8, OP_IMM8),
    ENCODING(0x30, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R8, OP_R8),
    ENCODING(0x32, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R8, OP_R8),
    ENCODING(0x32, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R8, OP_M8),
    ENCODING(0x35, REX_NONE, NONE, OP_A16, OP_IMM16),
    ENCODING(0x83, REX_NONE, MODRM(REG, 6, OP_0), OP_R16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 6, OP_0), OP_R16, OP_IMM16),
    ENCODING(0x31, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R16, OP_R16),
    ENCODING(0x33, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R16, OP_R16),
    ENCODING(0x33, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R16, OP_M16),
    ENCODING(0x35, REX_NONE, NONE, OP_A32, OP_IMM32),
    ENCODING(0x83, REX_NONE, MODRM(REG, 6, OP_0), OP_R32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(REG, 6, OP_0), OP_R32, OP_IMM32),
    ENCODING(0x31, REX_NONE, MODRM(REG, OP_1, OP_0), OP_R32, OP_R32),
    ENCODING(0x33, REX_NONE, MODRM(REG, OP_0, OP_1), OP_R32, OP_R32),
    ENCODING(0x33, REX_NONE, MODRM(OP_1, OP_0, OP_1), OP_R32, OP_M32),
    ENCODING(0x35, REX_W, NONE, OP_A64, OP_IMM32),
    ENCODING(0x83, REX_W, MODRM(REG, 6, OP_0), OP_R64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(REG, 6, OP_0), OP_R64, OP_IMM32),
    ENCODING(0x31, REX_W, MODRM(REG, OP_1, OP_0), OP_R64, OP_R64),
    ENCODING(0x33, REX_W, MODRM(REG, OP_0, OP_1), OP_R64, OP_R64),
    ENCODING(0x33, REX_W, MODRM(OP_1, OP_0, OP_1), OP_R64, OP_M64),
    ENCODING(0x80, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M8, OP_IMM8),
    ENCODING(0x30, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M8, OP_R8),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M16, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M16, OP_IMM16),
    ENCODING(0x31, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M16, OP_R16),
    ENCODING(0x83, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M32, OP_IMM8),
    ENCODING(0x81, REX_NONE, MODRM(OP_0, 6, OP_0), OP_M32, OP_IMM32),
    ENCODING(0x31, REX_NONE, MODRM(OP_0, OP_1, OP_0), OP_M32, OP_R32),
    ENCODING(0x83, REX_W, MODRM(OP_0, 6, OP_0), OP_M64, OP_IMM8),
    ENCODING(0x81, REX_W, MODRM(OP_0, 6, OP_0), OP_M64, OP_IMM32),
    ENCODING(0x31, REX_W, MODRM(OP_0, OP_1, OP_0), OP_M64, OP_R64),
  ),
};

#undef INSTRUCTION
#undef ENCODING
#undef REX_NONE
#undef REX_W
#undef MODRM_NONE
#undef MODRM
#undef OP_R8
#undef OP_R16
#undef OP_R32
#undef OP_R64
#undef OP_A8
#undef OP_A16
#undef OP_A32
#undef OP_A64
#undef OP_C8
#undef OP_M8
#undef OP_M16
#undef OP_M32
#undef OP_M64
#undef OP_M128
#undef OP_M
#undef OP_REL8
#undef OP_REL32
#undef OP_MOFFS32
#undef OP_MOFFS64
#undef OP_IMM8
#undef OP_IMM16
#undef OP_IMM32
#undef OP_IMM64
#undef OP_1
#undef OP_3
