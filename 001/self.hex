# [0x0000]
# ELF Header
7f 45 4c 46              # EI_MAG:        ELF Magic Number
02                       # EI_CLASS:      64-bit
01                       # EI_DATA:       Little-Endian
01                       # EI_VERSION:    ELF Version
00                       # EI_OSABI:      System V
00                       # EI_ABIVERSION: ABI Version
00 00 00 00 00 00 00     # EI_PAD:        Padding
02 00                    # e_type:        ET_EXEC
3e 00                    # e_machine:     AMD x86-64
01 00 00 00              # e_version:     ELF Version 1
00 10 40 00 00 00 00 00  # e_entry:     * Entry Point Address
40 00 00 00 00 00 00 00  # e_phoff:       Program Header Table Offset
40 11 00 00 00 00 00 00  # e_shoff:     * Section Header Table Offset
00 00 00 00              # e_flags
40 00                    # e_ehsize:      ELF Header Size
38 00                    # e_phentsize:   Program Header Table Entry Size
03 00                    # e_phnum:       Program Header Table Entry Count
40 00                    # e_shentsize:   Section Header Table Entry Size
04 00                    # e_shnum:       Section Header Table Entry Count
03 00                    # e_shstrndx:    Section Header Names Index
# +0x0040

# [0x0040]
# Program Header 0 - ELF and Program Headers
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
04 00 00 00              # p_flags:       PF_R - Read
00 00 00 00 00 00 00 00  # p_offset:      Segment Offset
00 00 40 00 00 00 00 00  # p_vaddr:       Segment Virtual Address
00 00 40 00 00 00 00 00  # p_paddr:       Segment Physical Address
e8 00 00 00 00 00 00 00  # p_filesz:      Size of Segment in File Image
e8 00 00 00 00 00 00 00  # p_memsz:       Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x0078]
# Program Header 1 - .text Section
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
05 00 00 00              # p_flags:       PF_R|PF_X - Read & Execute
00 10 00 00 00 00 00 00  # p_offset:    * Segment Offset
00 10 40 00 00 00 00 00  # p_vaddr:     * Segment Virtual Address
00 10 40 00 00 00 00 00  # p_paddr:     * Segment Physical Address
28 01 00 00 00 00 00 00  # p_filesz:    * Size of Segment in File Image
28 01 00 00 00 00 00 00  # p_memsz:     * Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x00B0]
# Program Header 2 - .bss Section
01 00 00 00              # p_type:        PT_LOAD Loadable Segment
06 00 00 00              # p_flags:       PF_R|PF_W - Read & Write
00 00 00 00 00 00 00 00  # p_offset:      Segment Offset
00 20 40 00 00 00 00 00  # p_vaddr:       Segment Virtual Address
00 20 40 00 00 00 00 00  # p_paddr:       Segment Physical Address
00 00 00 00 00 00 00 00  # p_filesz:      Size of Segment in File Image
80 00 00 00 00 00 00 00  # p_memsz:       Size of Segment in Memory
00 10 00 00 00 00 00 00  # p_align:       Alignment
# +0x0038

# [0x00E8]
# Padding to align .text to 0x1000


# [0x1000]
#_start:
        41 bc 40 00 00 00       # mov    $0x40,%r12d
        41 bd 40 00 00 00       # mov    $0x40,%r13d
        4d 31 f6                # xor    %r14,%r14
        49 bf 40 20 40 00 00    # movabs $0x402040,%r15
        00 00 00

#prompt:
        e8 29 00 00 00          # call   <gethex>
        88 c3                   # mov    %al,%bl
        c0 e3 04                # shl    $0x4,%bl
        e8 1f 00 00 00          # call   <gethex>
        00 c3                   # add    %al,%bl
        41 88 1f                # mov    %bl,(%r15)
        49 ff c7                # inc    %r15
        49 ff c6                # inc    %r14
        49 83 fe 40             # cmp    $0x40,%r14
        0f 8c 05 00 00 00       # jl     <continue>
        e8 b3 00 00 00          # call   <flush>

#continue:
        e9 d2 ff ff ff          # jmp    <prompt>

#gethex:
        e8 63 00 00 00          # call   <getchar>
        3c 23                   # cmp    $0x23,%al
        0f 84 41 00 00 00       # je     <comment>
        3c 30                   # cmp    $0x30,%al
        0f 8c eb ff ff ff       # jl     <gethex>
        3c 39                   # cmp    $0x39,%al
        0f 8f 07 00 00 00       # jg     <gethex1>
        2c 30                   # sub    $0x30,%al
        e9 29 00 00 00          # jmp    <rethex>

#gethex1:
        3c 41                   # cmp    $0x41,%al
        0f 8c d4 ff ff ff       # jl     <gethex>
        3c 46                   # cmp    $0x46,%al
        0f 8f 07 00 00 00       # jg     <gethex2>
        2c 37                   # sub    $0x37,%al
        e9 12 00 00 00          # jmp    <rethex>

#gethex2:
        3c 61                   # cmp    $0x61,%al
        0f 8c bd ff ff ff       # jl     <gethex>
        3c 66                   # cmp    $0x66,%al
        0f 8f b5 ff ff ff       # jg     <gethex>
        2c 57                   # sub    $0x57,%al

#rethex:
        c3                      # ret

#comment:
        e8 15 00 00 00          # call   <getchar>
        3c 0a                   # cmp    $0xa,%al
        0f 84 a5 ff ff ff       # je     <gethex>
        3c 0d                   # cmp    $0xd,%al
        0f 84 9d ff ff ff       # je     <gethex>
        e9 e6 ff ff ff          # jmp    <comment>

#getchar:
        4d 39 ec                # cmp    %r13,%r12
        0f 8c 27 00 00 00       # jl     <nextchar>
        48 31 c0                # xor    %rax,%rax
        48 31 ff                # xor    %rdi,%rdi
        48 be 00 20 40 00 00    # movabs $0x402000,%rsi
        00 00 00
        ba 40 00 00 00          # mov    $0x40,%edx
        0f 05                   # syscall
        48 83 f8 00             # cmp    $0x0,%rax
        0f 84 12 00 00 00       # je     <done>
        49 89 c5                # mov    %rax,%r13
        4d 31 e4                # xor    %r12,%r12

#nextchar:
        49 8b 84 24 00 20 40    # mov    0x402000(%r12),%rax
        00
        49 ff c4                # inc    %r12
        c3                      # ret

#done:
        e8 05 00 00 00          # call   <flush>
        e9 27 00 00 00          # jmp    <exit>

#flush:
        b8 01 00 00 00          # mov    $0x1,%eax
        bf 01 00 00 00          # mov    $0x1,%edi
        48 be 40 20 40 00 00    # movabs $0x402040,%rsi
        00 00 00
        4c 89 f2                # mov    %r14,%rdx
        0f 05                   # syscall
        4d 31 f6                # xor    %r14,%r14
        49 bf 40 20 40 00 00    # movabs $0x402040,%r15
        00 00 00
        c3                      # ret

#exit:
        b8 3c 00 00 00          # mov    $0x3c,%eax
        bf 00 00 00 00          # mov    $0x0,%edi
        0f 05                   # syscall

# [0x1128]
# Section Header Name Table 
00                              # Leading Zero Byte
2e 73 68 73 74 72 74 61 62 00   # ".shstrtab"
2e 74 65 78 74 00               # ".text"
2e 62 73 73 00                  # ".bss"

00 00
# +0x0018

# [0x0208]
# Section Table 0 (Reserved)
00 00 00 00                     # sh_name
00 00 00 00                     # sh_type
00 00 00 00 00 00 00 00         # sh_flags
00 00 00 00 00 00 00 00         # sh_addr
00 00 00 00 00 00 00 00         # sh_offset
00 00 00 00 00 00 00 00         # sh_size
00 00 00 00                     # sh_link
00 00 00 00                     # sh_info
00 00 00 00 00 00 00 00         # sh_addralign
00 00 00 00 00 00 00 00         # sh_entsize
# +0x0040

# [0x0208]
# Section Table 1
0b 00 00 00                     # sh_name:        ".text"
01 00 00 00                     # sh_type:        SHT_PROGBITS - Program Data
06 00 00 00 00 00 00 00         # sh_flags:       SHF_ALLOC|SHF_EXECINSTR - Occupies Memory and is Executable
00 10 40 00 00 00 00 00         # sh_addr:      * Virtual address in memory if loaded
00 10 00 00 00 00 00 00         # sh_offset:    * Offset in File Image
28 01 00 00 00 00 00 00         # sh_size:        Size in File Image
00 00 00 00                     # sh_link:        Associated Section Index
00 00 00 00                     # sh_info:        Extra Info
10 00 00 00 00 00 00 00         # sh_addralign:   Alignment
00 00 00 00 00 00 00 00         # sh_entsize:     Fixed Size Entry Size
# +0x0040

# [0x0248]
# Section Table 2
11 00 00 00              # sh_name:        ".bss"
08 00 00 00              # sh_type:        SHT_NOBITS - Program Space with No Data
03 00 00 00 00 00 00 00  # sh_flags:       SHF_WRITE|SHF_ALLOC - Writable and Occupies Memory
00 20 40 00 00 00 00 00  # sh_addr:        Virtual address in memory if loaded
00 20 00 00 00 00 00 00  # sh_offset:      Offset in File Image
80 00 00 00 00 00 00 00  # sh_size:        Size in File Image
00 00 00 00              # sh_link:        Associated Section Index
00 00 00 00              # sh_info:        Extra Info
04 00 00 00 00 00 00 00  # sh_addralign:   Alignment
00 00 00 00 00 00 00 00  # sh_entsize:     Fixed Size Entry Size
# +0x0040

# [0x0288]
# Section Table 3
01 00 00 00              # sh_name:        ".shstrtab"
03 00 00 00              # sh_type:        SHT_STRTAB - String Table
00 00 00 00 00 00 00 00  # sh_flags:       None
00 00 00 00 00 00 00 00  # sh_addr:        Virtual address in memory if loaded
28 11 00 00 00 00 00 00  # sh_offset:    * Offset in File Image
16 00 00 00 00 00 00 00  # sh_size:        Size in File Image
00 00 00 00              # sh_link:        Associated Section Index
00 00 00 00              # sh_info:        Extra Info
01 00 00 00 00 00 00 00  # sh_addralign:   Alignment
00 00 00 00 00 00 00 00  # sh_entsize:     Fixed Size Entry Size
# +0x0040
